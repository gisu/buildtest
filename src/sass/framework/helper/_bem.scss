// ===================================================
// BEM Helper
// ===================================================

// Define the global API Var, otherwise
// the Components throw an error becaus there
// need a outer API Map for Merging
$api: ();

// Build a BEM Element
//
// @param  {string}  $name - The selector name
@mixin e($name) {
  @at-root {
    &#{map-get($kittn-bem, element)}#{$name} {
      @content;
    }
  }
}

// Build a BEM Modifier
// Add a Modification to a style
//
// @param  {*}     $name           - The selector name
// @param  {bool}  $extend (false) - If the Modifier need to be extended with parent
@mixin m($name, $extend: false) {
  // Internal Extend Var
  $e: &;

  @at-root {
    &#{map-get($kittn-bem, modifier)}#{$name} {
      // Extend with the Parent Element
      @if $extend != false {
        @extend #{$e};
      }
      @content;
    }
  }
}

// Build a BEM Instance
// Modify an existing Style. The Instanz use the Parent and add the
// modification
//
// @param  {*} $name - Instance name
@mixin i($name) {
  $e: &;

  @at-root {
    &#{map-get($kittn-bem, instance)}#{$name} {
      // Extend with the Parent Element
      @extend #{$e};
      @content;
    }
  }
}

// Setup the Root Element for the following chained Modifers
//
// @param  {*}  $name - The selector name
//
// @example
//  .test {
//    @include chainroot {
//     content: hello;
//    }
//  }
//
@mixin chainroot {
  // Define the Parent Class - for Nested Chains
  $r: &;
  $root: str-slice('#{$r}',2,str-length('#{$r}'));

  @at-root {
    &, [class^="#{$root}"] {
      @content;
    }
  }
}

// Chain the Modifiers
//
// @param  {string} $name - The selector name, only the name
//
// @example
//  .test {
//    @include chainroot {
//      font-size: 20px;
//      line-height: 24px;
//      @include chain('wider') {
//        width: 300px;
//      }
//    }
//  }
@mixin chain($name) {
  $p: &;
  $parent: str-slice('#{$p}',2,str-length('#{$p}'));

  @at-root {
    [class^="#{$parent}"][class*="#{map-get($kittn-bem, modifier)}#{$name}"] {
      @content;
    }
  }
}

// Build smarter Chaining Selectors
//
// @param {string} $tag - Name of the Attribute
// @param {string|bool} $c - Childname
// @param {string|bool} $m - Modifiername
// @param {bool} $context - When the selectornesting is needed
@mixin tag($tag, $c: false, $m: false, $context: false) {
  // Defaults
  $child: null;
  $ct: null;
  $mod: null;

  // Build Child and Modifier Fragments
  @if $c { $child: '__#{$c}'; }
  @if $m { $mod: "~='#{$m}'"; }

  // Build Selector
  @if $context {
    > [#{$tag}#{$child} #{$mod}] {
      @content;
    }
  } @else {
    @at-root {
      [#{$tag}#{$child} #{$mod}] {
        @content;
      }
    }
  }
}

// Modify a Style with the Context. Used for Component
// Building. The Context is in this more an external modifier.
//
// @param   {map} $map  Connection to the API Map
// @param   {string} $name Contextname of the outer Class
@mixin context($map, $name) {
  @if v($map, context) == $name {
    .#{$name} & {
      @content;
    }
  }
}
