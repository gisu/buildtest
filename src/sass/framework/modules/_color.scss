// ===================================================
// Color Helper
// ===================================================

// Calculate the Luma Value from a Color
//
// @param  {Color}  $color - Color Value
//
// @returns {Number}
@function luma($color) {
  @return (red($color) * .299) + (green($color) * .587) + (blue($color) * .114);
}

// Check if Color1 is greater than Color2, return true
//
// @param  {Color}  $color1 - Color Value
// @param  {Color}  $color2 - Color Value
//
// @returns {Bool}
@function luma-gte($color1, $color2) {
  @if luma($color1) >= luma($color2) {
    @return true;
  }
  @else {
    @return false;
  }
}

// Check if Color1 is smaller than Color2, return true
//
// @param  {Color}  $color1 - Color Value
// @param  {Color}  $color2 - Color Value
//
// @returns {Bool}
@function luma-lte($color1, $color2) {
  @if luma($color1) <= luma($color2) {
    @return true;
  }
  @else {
    @return false;
  }
}

// Calculate the Luma Difference between Color1 and Color2
//
// @param  {Color}  $color1 - Color Value
// @param  {Color}  $color2 - Color Value
//
// @returns {Number}
@function luma-diff($color1, $color2) {
  @return luma($color1) - luma($color2);
}

// Mixin to get Color Values from the Color Map
//
// @access private
//
// @param  {*}     $target            - Color Key from Map
// @param  {*}     $attrib (color)    - The Color Attribute
// @param  {Bool}  $imp (false)       - For !important setting
// @param  {Map}   $map (stylecolors) - Color Map
@mixin _color($target, $attrib: color, $imp: false, $map: $kittn-color-map) {

  // Check if '$target' is in the Map
  @if map-has-key($map,$target) {
    // Put the Data in a own map
    $colors : map-get($map,$target);

    // Check if the Color have an opacity value
    // Generate RGBA Colors with an IE8 Fallback (hex)
    @if map-get($colors,opacity) != false {

      // Generate the IE8 Fallback Colors
      @include jacket(old) {
        #{$attrib}: map-get($colors,color) if($imp, !important, null);
      }

      // Generate RGBA Colors
      @include jacket(modern) {
        #{$attrib}: rgba(map-get($colors,color),map-get($colors,opacity)) if($imp, !important, null);
      }

    // Otherwise use Hex Colors
    } @else {
      #{$attrib}: map-get($colors,color) if($imp, !important, null);
    }

  } @else {
    @warn 'The Color "#{$target}" are not available in the Color Map! Possible Colorkeys: "#{map-keys($map)}"';
  }
}

// Use the desired Color Value from the Map an build a Color Value
//
// @param  {*}    $target - The Color Key
// @param  {Bool} $hard   - For !important setting
@mixin get-c($target, $hard: false) {
  @include _color($target, $attrib: color, $imp: $hard);
}

// Use the desired Color Value from the Map an build a Background-Color Value
//
// @param  {*}     $target - The Color Key
// @param  {Bool}  $hard   - For !important setting
@mixin get-bc($target, $hard: false) {
  @include _color($target, $attrib: background-color, $imp: $hard);
}

// Generate Color Classes (or Silent) with all Colors from the Color Map.
//
// @access private
//
// @type {Map}  $colors - The Desired Map
@mixin colorgenerator($colors: $kittn-color-map) {
  @each $value, $entry in $colors {

    // Build Placeholder Classes
    %c#{map-get($kittn-bem, modifier)}#{$value} {
      @include _color($value,color);
    }
    %bc#{map-get($kittn-bem, modifier)}#{$value} {
      @include _color($value,background-color);
    }

    // Set Class for Text Color
    @if map-get($entry,type) == c {
      .c#{map-get($kittn-bem, modifier)}#{$value} {
        @include _color($value,color);
      }
    }

    // Set Class for Background-Color
    @if map-get($entry,type) == b {
      .bc#{map-get($kittn-bem, modifier)}#{$value} {
        //@include _color($value,background-color);
        @extend %bc#{map-get($kittn-bem, modifier)}#{$value};
      }
    }

    // Set two Classes for Text & Background-Color
    @if map-get($entry,type) == bc {
      .c#{map-get($kittn-bem, modifier)}#{$value} {
        @extend %c#{map-get($kittn-bem, modifier)}#{$value};
      }
      .bc#{map-get($kittn-bem, modifier)}#{$value} {
        @extend %bc#{map-get($kittn-bem, modifier)}#{$value};
      }
    }
  }
}

// Extend the Element with existing Color Classes
//
// @param  {*}  $name - Color Key
@mixin ext-c($name) {
  @extend %c#{map-get($kittn-bem, modifier)}#{$name};
}

// Extend the Element with existing Background-Color Classes
//
// @param  {*}  $name - Color Key
@mixin ext-bc($name) {
  @extend %bc#{map-get($kittn-bem, modifier)}#{$name};
}

// Build a Color list with eval steps
//
// @param {List} $color - Color Values
// @param {Number} $steps - Number off steps to reach the other color
// @param {Bool|Number} $pointer - Move the Pointer to one Color Value from the list
//
// @returns {Color|List} - Returns a List off colors or one color value
@function color-scale($color, $steps: 2, $pointer: false) {
  // Define default vars
  $list: null;
  $colors: null;

  // Manipulate Steps when is too low
  @if $steps < 2 {
    $steps: 2;
    @warn 'Step Number is too low - is clamped to minimum off 2';
  }

  // Calculate the step size
  $c: 100 / ($steps - 1);

  // Check the length of the color value
  @if length($color) == 2 {

    // If $pointer is false generate a color list
    @if $pointer == false {

      // Loop it
      @for $i from 0 through ($steps - 1) {
        $colors: mix(nth($color,1), nth($color,2), (100 - ($c * ($i))));

        // Add Values to the list
        $list: append($list, $colors);
      }

      // Return a list with Color Values
      @return $list;

    } @else {

      // Check $pointer values
      $pointer: strip-units($pointer);
      $pointer: clamp($pointer, 0, $steps);

      // Build the Color Value
      $colors: mix(nth($color,1), nth($color,2), (100 - ($c * ($pointer - 1))));

      // Return Color
      @return $colors;
    }

  } @else {
    @warn 'Not enough Color Values - the Function need two Values.'
  }
}

// Build an individual Color Stack
//
// @param {List} $color - Color Values
// @param {List} $stacks - Individual steps between the color mix
//
// @returns {List}
@function color-stack($color, $stacks) {
  // Define default vars
  $list: null;
  $own-stack: null;
  $stack-value: null;

  // Check the length of the color value
  @if length($color) == 2 {

    // Function need minimum two stack values
    @if length($stacks) > 1 {

      // Filter all Values above 100 from stacks list
      @for $o from 1 through length($stacks) {
        @if nth($stacks, $o) <= 100 {
          $own-stack: append($own-stack, nth($stacks,$o));
        }
      }

      // Remove Duplicates
      $own-stack: sl-remove-duplicates($own-stack);

      // Get length
      $stack-length: length($own-stack);

      // Loop it
      @for $i from 1 through ($stack-length - 1){
        // Clamp the Stack value
        $mod: clamp(nth($stacks, $i), 0, 100);

        // Build Color Value
        $colors: mix(nth($color,1), nth($color,2), $mod);

        // Add Values to the list
        $list: append($list, $colors);
      }

      // Return the Color Values as list
      @return $list;

    } @else if length($stacks) == 1 {
      // Clamp the Stack value
      $mod: clamp($stacks, 0, 100);

      // Build Color Value
      $colors: mix(nth($color,1), nth($color,2), $mod);

      // Return the Color Values as list
      @return $colors;

    } @else {
      @warn 'Not enough Stacks to build a Color Stack'
    }

  } @else {
    @warn 'Not enough Color Values - the Function need two Values.'
  }
}

// Build a Set of Colors based on the Color-Scale Function
//
// @requires color-scale()
//
// @param {Map} $setup
// - color {List} - Color Values
// - steps {Number} - Number off steps to reach the other color
// - attribute {*} - Attribute
// - extend {Bool|*} - For extending the classes with other Classes
//
@mixin color-scale-generator($setup: ()) {
  // Setup
  $setup: map-merge((
    color: #000 #000,
    steps: 5,
    attribute: background-color,
    extend: false
  ), $setup);

  // Mixin need min two step values
  @if map-get($setup, steps) > 1 {

    // Build a Color List
    $cs: color-scale(map-get($setup,color), map-get($setup,steps));

    // Generate the Classes
    @for $i from 1 through (length($cs)) {

      &#{map-get($kittn-bem, modifier)}#{$i - 1} {
        // Include the Attribute
        #{map-get($setup, attribute)}: nth($cs,$i);

        // When the Classes need to be Extended
        @if map-get($setup, extend) {
          @extend #{map-get($setup, extend)};
        }
      }
    }
  } @else {
    @warn 'A Color-Scale need more than one steps value.';
  }
}

// Generate Stack off individual Colors
//
// @requires color-stack()
//
// @param {Map} $setup
// - color {List} - Color Values
// - stacks {List} - Individual steps between the color mix
// - attribute {*} - Attribute
// - extend {Bool|*} - For extending the classes with other Classes
@mixin color-stack-generator($setup: ()) {
  // Default Setup
  $setup: map-merge((
    color: #000 #fff,
    stacks: 30 60 90,
    attribute: background-color,
    extend: false
  ), $setup);

  // Mixin need minimum two stack values
  @if length(map-get($setup, stacks)) > 1 {

    // Build a Color List
    $cs: color-stack(map-get($setup,color), map-get($setup,stacks));

    // Generate the Classes
    @for $i from 1 through (length($cs)) {

      &#{map-get($kittn-bem, modifier)}#{$i - 1} {
        // Include the Attribute
        #{map-get($setup, attribute)}: nth($cs,$i);

        // When the Classes need to be Extended
        @if map-get($setup, extend) {
          @extend #{map-get($setup, extend)};
        }
      }
    }
  } @else {
    @warn 'The Color-Stack need more the one stack value.';
  }
}
