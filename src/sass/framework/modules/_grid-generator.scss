// ===================================================
// Grid Generator
// ===================================================

// Default Vars
$bem-modifier: map-get($kittn-bem, modifier);
$mobile-first: map-get($kittn-activate, mobile-first);

// Get data from the Map
//
// @access private
//
// @returns {*}
@function g-api($name) {
  @return map-get($kittn-grid-setup, $name);
}

// Setup the Prefix for the Grid Classes
//
// @access private
//
// @returns {*}
@function gridprefix() {
  @if g-api(silent) {
    @return '%';
  } @else {
    @return '.';
  }
}

// Build a base grid with all features
//
// @param {map} $kittn-grid-setup - Map with the whole Config Data
@mixin main-grid-generator($kittn-grid-setup) {

  @if g-api(activate) {

    // Class Prefix
    $p: gridprefix();

    // Set the Breakpoint
    $breakpoint: g-api(breakpoint);

    // Establish grid container
    #{$p}#{g-api(container-name)} {
      // Activate the Adaptive Grid
      @if g-api(container-adaptive) {
        @include adaptive();
      }

      // Build the container style
      @include container(if(g-api(container-adaptive),false,g-api(container-width)),(
        position: g-api(container-position),
        gutter: g-api(container-offset),
        spacing: g-api(spacing),
        static-ie: g-api(container-ie8-style),
      ));
    }

    // Establish grid row
    #{$p}#{g-api(row-name)} {
      @include row(g-api(spacing), (
        layout: g-api(layouttype),
        valign: g-api(valign),
        align: g-api(align),
      ));
    }

    // Establish grid colum
    #{$p}#{g-api(colum-name)} {
      // When Mobile-First is activate the Colum Layout after the Breakpoint

      @if $mobile-first {
        @include colum(g-api(spacing), (
          layout: none,
          valign: g-api(valign),
          align: g-api(align),
          extras: g-api(colum-extras),
        ));

        @include break($breakpoint) {
          @include colum(g-api(spacing), (
            layout: g-api(layouttype),
            valign: g-api(valign),
            align: g-api(align),
            extras: g-api(colum-extras),
          ));
        }

      } @else {
        // With Mobile-First off activate the Colum Layout
        // when reach the breakpoint deactive the layout
        @include colum(g-api(spacing), (
          layout: g-api(layouttype),
          valign: g-api(valign),
          align: g-api(align),
          extras: g-api(colum-extras),
        ));

        @include break($breakpoint) {
          @include colum(g-api(spacing),(
            layout: none,
            valign: g-api(valign),
            align: g-api(align),
            extras: g-api(colum-extras),
          ));
        }
      }
    }

    // Establish grid sizes
    #{$p}#{g-api(size-name)} {

      @if $mobile-first {
        @include break($breakpoint) {

          // Activate the Grid Generator
          @include grid-generator(g-api(colums),(
            select: if(g-api(silent), false, g-api(size-select)),
            name: false,
            extend: g-api(size-extend)
          ));

        }
      } @else {
        @include grid-generator(g-api(colums),(
          select: if(g-api(silent), false, g-api(size-select)),
          name: false,
          extend: g-api(size-extend)
        ));

        // Normalize the Size Classes
        @include break($breakpoint) {
          @at-root {
            [class^="#{g-api(size-name)}#{$bem-modifier}"],
            [class*="#{g-api(size-name)}#{$bem-modifier}"] {
              width: 100%;
            }
          }

        }
      }
    }

    // Establish the Offset Classes
    @if g-api(offset-activate) or g-api(silent)  {
      #{$p}#{g-api(offset-name)} {
        // Check if Mobile First
        @if $mobile-first {
          // Build the offset when the breakpoints is reached
          @include break($breakpoint) {
            @include offset-generator(g-api(colums));
          }
        } @else {
          @include offset-generator(g-api(colums));

          // Normalize the offset classes when the breakpoint is reached
          @include break($breakpoint) {
            @include grid-reset((
              name: g-api(offset-name),
              option: offset
            ));
          }
        }
      }
    }

    // Establish the Push'n Pull Classes
    @if g-api(pushpull-activate) or g-api(silent) {
      #{$p}#{g-api(pushpull-name)} {
        // Check if Mobile First
        @if $mobile-first {
          // Build the pushpull when the breakpoints is reached
          @include break($breakpoint) {
            @include pushpull-generator(g-api(colums));
          }
        } @else {
          @include pushpull-generator(g-api(colums));

          // Normalize the pushpull classes when the breakpoint is reached
          @include break($breakpoint) {
            @include grid-reset((
              name: g-api(pushpull-name),
              option: pushpull
            ));
          }
        }
      }
    }
  }
}

// Extend with the Base Container Class
@mixin ext-container {
  @if g-api(activate) {
    @extend #{gridprefix()}#{g-api(container-name)};
  } @else {
    @warn 'The Base Grid Generator is not activated';
  }
}

// Extend with the base row class
@mixin ext-row {
  @if g-api(activate) {
    @extend #{gridprefix()}#{g-api(row-name)};
  } @else {
    @warn 'The Base Grid Generator is not activated';
  }
}

// Extend with the base colum class
@mixin ext-colum {
  @if g-api(activate) {
    @extend #{gridprefix()}#{g-api(colum-name)};
  } @else {
    @warn 'The Base Grid Generator is not activated';
  }
}

// Extend with the width class
//
// @param {Number} $number - Size Number
@mixin ext-size($number: 1) {
  @if g-api(activate) {
    // Cleanup the number
    $number : strip-units($number);
    $number : clamp($number, 0, g-api(colums));

    @extend #{gridprefix()}#{g-api(size-name)}#{$bem-modifier}#{$number};
  } @else {
    @warn 'The Base Grid Generator is not activated';
  }
}

// Extend with width class and colum
//
// @param {Number} $number - Size Number
@mixin ext-colsize($number: 1) {
  @include ext-colum;
  @include ext-size($number);
}

// Extend with offset-left class
//
// @param {Number} $number - Size Number
@mixin ext-ol($number: 1) {
  @if g-api(activate) {
    @if g-api(offset-activate) {

      // Cleanup the number
      $number : strip-units($number);
      $number : clamp($number, 0, (g-api(colums) - 1));

      @extend #{gridprefix()}#{g-api(offset-name)}-left#{$bem-modifier}#{$number};
    } @else {
      @warn 'There no Offset Classes defined!';
    }
  } @else {
    @warn 'The Base Grid Generator is not activated';
  }
}

// Extend with offset-right class
//
// @param {Number} $number - Size Number
@mixin ext-or($number: 1) {
  @if g-api(activate) {
    @if g-api(offset-activate) {

      // Cleanup the number
      $number : strip-units($number);
      $number : clamp($number, 0, (g-api(colums) - 1));

      @extend #{gridprefix()}#{g-api(offset-name)}-right#{$bem-modifier}#{$number};
    } @else {
      @warn 'There no Offset Classes defined!';
    }
  } @else {
    @warn 'The Base Grid Generator is not activated';
  }
}

// Extend with push class
//
// @param {Number} $number - Size Number
@mixin ext-push($number: 1) {
  @if g-api(activate) {
    @if g-api(pushpull-activate) {

      // Cleanup the number
      $number : strip-units($number);
      $number : clamp($number, 0, (g-api(colums) - 1));

      @extend #{gridprefix()}#{g-api(pushpull-name)}-push#{$bem-modifier}#{$number};
    } @else {
      @warn 'There no Push&Pull classes defined!';
    }
  }
}

// Extend with pull class
//
// @param {Number} $number - Size Number
@mixin ext-pull($number: 1) {
  @if g-api(activate) {
    @if g-api(pushpull-activate) {

      // Cleanup the number
      $number : strip-units($number);
      $number : clamp($number, 0, (g-api(colums) - 1));

      @extend #{gridprefix()}#{g-api(pushpull-name)}-pull#{$bem-modifier}#{$number};
    } @else {
      @warn 'There no Push&Pull classes defined!';
    }
  }
}
