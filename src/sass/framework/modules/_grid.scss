// ===================================================
// Grid
// ===================================================

// Default Vars
$bem-modifier: map-get($kittn-bem, modifier);
$mobile-first: map-get($kittn-activate, mobile-first);

// Calculate the Size in Percent
//
// @param  {Number}  $colums         - Colums
// @param  {Number}  $maxColums (12) - Max Colums
//
// @returns {Number}                 - Percentage Value
@function span($colums, $maxColums: 12) {
  // Clean up
  $colums: strip-units($colums);
  $maxColums: strip-units($maxColums);

  // Clamp the Number
  $colums: clamp($colums, 0, $maxColums);

  @return percentage($colums / $maxColums);
}

  // Old Decrepated Function Name (dropped with Kittn 2.5)
  @function grid-size($colums, $maxColums: 12) {
    @return span($colums: $colums, $maxColums: $maxColums);
  }


// Setup the Grid Size in Steps based on the Breakpoints
@mixin adaptive() {
  $list: ();

  // Move Values in a list
  @each $name, $entry in $kittn-breakpoint-map {
    @if map-get($entry, step) == true {
      $list: append($list, map-get($entry,size), comma);
    }
  }

  // Clean up Duplicates
  $list: sl-remove-duplicates($list);

  // Sort the List
  @if $mobile-first != true {
    $list: sl-reverse($list);
  }

  // Set the Start Width
  width: nth($list,1);

  // Build the Stepped Width
  @for $i from 2 through length($list) {
    @media screen and (if($mobile-first, min-width, max-width): if($mobile-first, (nth($list,$i)), nth($list,$i) - 1)) {
      width: if($mobile-first, (nth($list,$i)), nth($list,$i) - 1);
    }
  }
}

  // Old Decrepated Mixin Name (dropped with Kittn 2.5)
  @mixin grid-adaptive() {
    @include adaptive();
  }

// Generate the Page Container, Size and Float Direction
//
// @param  {list} $width        - Container Size. The Max and Min Width of the container. One Value only the Container is static
// @param  {Map}  $o      - Setup Vars
//         :pos [value]         - (values: center | left | right) The Position of the Container, default is centered container
//         :gutter [number]     - The Size of the Outer Gutter only active with $pos left or right
//         :spacing [number]    - Side Padding of the Container
//         :static-ie [boolean] - When is set on 'true' IE8 get a static Container
@mixin container($width: 320 1180, $o: ()) {

  // Mixin Default Vars
  $o: map-merge((
    position: center,
    gutter: 0,
    spacing: 10,
    static-ie: false
  ),$o);

  // Variable Routing
  $position  : map-get($o,position);
  $gutter    : map-get($o,gutter);
  $spacing   : map-get($o,spacing);
  $static-ie : map-get($o,static-ie);

  // Position for the Container
  @if $position == left {
    // left positioned
    @if $gutter > 0 {
      margin-left: unit-check($gutter);
    }

  } @else if $position == right {
    // right positioned
    float: right;

    @if $gutter > 0 {
      margin-right: unit-check($gutter);
    }

  } @else {
    // centered
    margin-left: auto;
    margin-right: auto;
  }

  // When width == false write no width values
  @if $width != false {

    // Include the Size of the Container
    @if length($width) > 2 {
      @warn 'To many Values for "width". Reduce to max two Values.';

    } @else if length($width) == 2 {
      $width-val-1: unit-check(nth($width,1));
      $width-val-2: unit-check(nth($width,2));

      // Check the Values
      @if $width-val-1 == $width-val-2 {
        width: $width-val-1 + 0px;

      } @else {
        // Sort the Values
        width: 100%;
        min-width: if($width-val-1 < $width-val-2, $width-val-1, $width-val-2);
        max-width: if($width-val-1 < $width-val-2, $width-val-2, $width-val-1);
      }

    } @else {
      // With only one width Value, the outer container is static for all Browsers
      width: unit-check($width);
    }
  }

  // Make the Container non-fluid for IE when activated
  @if $static-ie != false {
    .ie8 & {

      // When the Base the base width are two values, overwrite this with ie8
      @if length($width) > 1 {
        width: 100%;

        @if $static-ie > 0 {
          min-width: unit-check($static-ie);
          max-width: unit-check($static-ie);

        } @else {
          // When the Size is to low (zero), Sass use the biggest width for establish the Static width
          min-width: if($width-val-1 < $width-val-2, $width-val-2, $width-val-1);
          max-width: if($width-val-1 < $width-val-2, $width-val-2, $width-val-1);
        }

      } @else {
        width: unit-check($static-ie);
      }
    }
  }

  // Include Padding of the Container
  @if $spacing > 0 {
    padding-left: unit-check($spacing);
    padding-right: unit-check($spacing);
  }
}

  // Old Decrepated Mixin Name (dropped with Kittn 2.5)
  @mixin grid-container($width: 320 1180, $o: ()) {
    @include container($width: $width, $o: $o);
  }

// Build the outer Container that hold the Grid-Columns
//
// @param  {number} $spacing - To reset the margin off a nested rows. Set it to the Colum Guttersize.
// @param  {Map}    $o - Setup Vars
//         :layout [value]   - The type from the Layout, values: inline | table | flex | block (default)
//         :valign [string]  - Vertical Align, values: top (default), bottom, baseline, middle
//         :align [value]    - Horizontal align, values: justify | center | right | left (default)
@mixin row($spacing: 10, $o: ()) {

  // Mixin Default Vars
  $o: map-merge((
    layout: block,
    valign: top,
    align: left
  ),$o);

  // Variable Routing
  $layout : map-get($o,layout);
  $valign : map-get($o,valign);
  $align  : map-get($o,align);

  // Setup posible Vertical Align Values
  $valign-values: top, bottom, baseline, middle;

  // Check if the Valign Values are posible
  @if index($valign-values, $valign) {

    // Setup the horizontal Align for the inner Colums
    @if $align == justify {
      &:after {
        content: '';
        display: inline-block;
        width: 100%;
      }
    } @else if $align == center {
      text-align: center;

    } @else if $align == right {
      text-align: right;
    }

    // Setup the Layout
    @if $layout == inline {
      vertical-align: $valign;
      font-size: 0.1px;

    } @else if $layout == table {
      display: table;
      width: 100%;

    } @else if $layout == flex {
      display: flex;

    } @else {
      @include clearfix;

      & & {
        margin-left: 0 - unit-check($spacing);
        margin-right: 0 - unit-check($spacing);
      }
    }

  } @else {
    @warn 'The Valign Value "#{$valign}" is not posible!';
  }
}

  // Old Decrepated Mixin Name (dropped with Kittn 2.5)
  @mixin grid-row($spacing: 10, $o: ()) {
    @include row($spacing: $spacing, $o: $o);
  }

// Build the Base Style for all Colums. Include the Mixin in your Colum Class
//
// @param  {number} $spacing - Colum Sidespacing
// @param  {Map}    $o - Setup Vars
//         :layout [value]   - The type from the Layout, values: inline | table | flex | block (default)
//         :extras [boolean] - For include additional classes for the colums
//         :valign [string]  - Vertical Align, values: top (default), bottom, baseline, middle
//         :align [value]    - Horizontal align, values: justify | center | right | left (default)
@mixin colum($spacing: 10, $o: ()) {

  // Mixin Default Vars
  $o: map-merge((
    layout: block,
    extras: false,
    valign: top,
    align: left
  ),$o);

  // Variable Routing
  $layout : map-get($o,layout);
  $extras : map-get($o,extras);
  $valign : map-get($o,valign);
  $align  : map-get($o,align);

  // Setup posible Vertical Align Values
  $valign-values: top, bottom, baseline, middle;
  $align-values: left, right, center;

  // Set the Colum Spacing to establish the Colum Gutter
  @if $spacing > 0 {
    padding-left: unit-check($spacing);
    padding-right: unit-check($spacing);
  }

  // Include Extra Classes for the Colums
  @if $extras != false {
    min-height: 1px;

    &#{$bem-modifier}collapse {
      padding-left: 0;
      padding-right: 0;
    }

    @if $layout == block {
      &#{$bem-modifier}left {
        float: left !important;
      }

      &#{$bem-modifier}right {
        float: right !important;
      }

      &#{$bem-modifier}center {
        float: none !important;
        margin-left: auto;
        margin-right: auto;
      }
    }
  }

  // Setup the Colum Layout
  @if $layout == inline {
    // Style the Inline-Block Layout
    display: inline-block;
    letter-spacing: normal;
    word-spacing: normal;
    white-space: normal;

    // Check if the Valign Value is available
    @if index($valign-values, $valign) {
      vertical-align: $valign;

    } @else {
      @warn 'The Valign Value "#{$valign}" is not posible!';
    }

    // Check if the Align Value is available
    @if index($align-values, $align) {
      text-align: $align;

    } @else {
      @warn 'The Align Value "#{$align}" is not posible!';
    }

  } @else if $layout == table {
    // Style the Table Layout
    display: table-cell;

    // Check if the Valign Value is available
    @if index($valign-values, $valign) {
      vertical-align: $valign;

    } @else {
      @warn 'The Valign Value "#{$valign}" is not posible!';
    }

  } @else if $layout == flex {
    // Style for the Flexbox Layout

  } @else if $layout == none {
    // Empty when none

  } @else {
    // Style for the Block layout
    display: block;

    @if $layout == right {
      float: right;

      &:last-child {
        float: left;
      }

    } @else if $align == center {
      margin: 0 auto

    } @else if $align == leftleft {
      float: left;

    } @else if $align == rightright {
      float: right;

    } @else {
      float: left;

      &:last-child {
        float: right;
      }
    }
  }
}

  // Old Decrepated Mixin Name (dropped with Kittn 2.5)
  @mixin grid-colum($spacing: 10, $o: ()) {
    @include colum($spacing: $spacing, $o: $o);
  }

// Generate a Grid Colum Size
//
// @param  {Number} $colum - The desired Columsize
// @param  {Map}  $grid    - Setup Vars
//         :max [number]   - The Max available columssizes. Default are 12 Colums per row
//         :flex [boolean] - Flexbox Option - when active it uses only the $size
@mixin span($colum: 1, $o: ()) {

  // Mixin Default Vars
  $o: map-merge((
    max: 12,
    flex: false
  ),$o);

  // Variable Routing
  $max  : map-get($o, max);
  $flex : map-get($o, flex);

  // Cleanup Max
  $m: strip-units($max);

  // Cleanup Size
  $s: clamp(strip-units($colum), 0, $m);

  // Check if Flexbox is active
  @if $flex == false {
    width: span($s, $m);

  } @else {
    // Generate the Flexbox Width
    flex: $s;
  }
}

  // Old Decrepated Mixin Name (dropped with Kittn 2.5)
  @mixin grid-size($colum: 1, $o: ()) {
    @include span($colum: $colum, $o: $o);
  }


// Generate a Pixel Based Grid Colums
//
// @param  {Number} $colum  - The desired Columsize
// @param  {Map}  $o  - Setup Vars
//         :max [number]    - The Max available columssizes. Default are 12 Colums per row
//         :margin [number] - Margin on the left and right side
//         :space [number]  -  Max Width in Px from the outer Container
@mixin static-colum($colum: 1, $o: ()) {

  // Mixin default vars
  $o: map-merge((
    max: 12,
    margin: 10,
    space: 1180
  ),$o);

  // Variable Routing
  $max    : map-get($o,max);
  $margin : map-get($o,margin);
  $space  : map-get($o,space);

  // Cleanup Max
  $m: strip-units($max);

  // Cleanup Size
  $s: clamp(strip-units($colum), 0, $m);

  // Cleanup Margin
  $g: strip-units($margin) * 2;

  // Calculate the Width
  @if $s > 0 {
    width: strip-units($s) * (strip-units($space) / $m) - $g + 0px;

    // Setup Margin
    @if $margin > 0 {
      margin-left: strip-units($margin) + 0px;
      margin-right: strip-units($margin) + 0px;
    }

  } @else {
    width: strip-units($s) * (strip-units($space) / $m) + 0px;
  }
}

  // Old Decrepated Mixin Name (dropped with Kittn 2.5)
  @mixin pixel-grid($colum: 1, $o: ()) {
    @include static-colum($colum: $colum, $o: $o);
  }

// Generate all Colum Sizes, it can be also preselected
//
// @param  {number} $colums         - Number of generated columns
// @param  {map}    $o        - Setup Vars
//         :colums [number]         - Maximum Colums
//         :select [boolean|list]   - Include a List with the Sizes that you want. Duplicate will be removed
//         :name [boolean|string]   - Classname when the Mixin is not nested in a class.
//         :extend [boolean|string] - Connect the generated classes with a other class.
//         :silent [bool]      - Generate Placeholder Classes
@mixin grid-generator($colums: 12, $o: ()) {

  // Mixin Default Vars
  $o: map-merge((
    select: false,
    name: false,
    extend: false,
    silent: false
  ),$o);

  // Variable Routing
  $select : map-get($o,select);
  $name   : map-get($o,name);
  $extend : map-get($o,extend);
  $silent : map-get($o,silent);
  $p      : null;

  // Class Prefix (realClass or silentClass)
  @if $silent {
    $p: '%';
    @if $name == false {
      $name: 'span';
    }

  } @else {
    $p: '.';
  }

  @if $select == false {
    // Generate a whole List off Colum Size Classes
    @for $i from 1 through strip-units($colums) {

      // Use outer Classes or free defined selectors
      @if $name == false {
        &#{$bem-modifier}#{$i} {
          @include span($i, (
            max: strip-units($colums)
          ));

          // Connect the Classes with other Classes
          @if $extend != false {
            @extend #{$extend};
          }
        }

      } @else {
        // Generate a List with Selector Names for Control
        @if $silent {
          // If no name available include a empty name for the silent class

          /* #{$p}#{$name}#{$bem-modifier}#{$i} */
        }

        #{$p}#{$name}#{$bem-modifier}#{$i} {
          @include span($i, (
            max: strip-units($colums)
          ));

          // Connect the Classes with other Classes
          @if $extend != false {
            @extend #{$extend};
          }
        }
      }
    }

  } @else {
    // Generate a List with preselected colum size classes
    // Clean Up the List
    $clean-list: sl-remove-duplicates(sl-sort($select));

    // The duration of the Loop
    $loop-length: length($clean-list);

    // Connect the Classes
    // Build a individual Loop
    @for $i from 1 through $loop-length {
      // Dont Generate when the Numbers are bigger than maxColums and lower than 1
      @if (nth($select, $i)) <= $colums and (nth($select, $i)) >= 1 {

        // Use outer Classes or free defined selectors
        @if $name == false {
          &#{$bem-modifier}#{nth($clean-list, $i)} {
            @include span(nth($clean-list, $i), (
              max: strip-units($colums)
            ));

            // Connect the Classes with other Classes
            @if $extend != false {
              @extend #{$extend};
            }
          }

        } @else {
          // Generate a List with Selector Names for Controll
          @if $silent {
            /* #{$p}#{$name}#{$bem-modifier}#{nth($clean-list, $i)} */
          }
          #{$p}#{$name}#{$bem-modifier}#{nth($clean-list, $i)} {
            @include span(nth($clean-list, $i), (
              max: strip-units($colums)
            ));

            // Connect the Classes with other Classes
            @if $extend != false {
              @extend #{$extend};
            }
          }
        }
      }
    }
  }
}

// Scales down a generated Grid
//
// @param  {number} $colums       - Number of generated columns
// @param  {map}  $o        - Setup Vars
//         :name [boolean|string] - Classname when the Mixin is not nested in a class.
//         :devide [number]       - Devide the Grid and rearange the sizes
@mixin grid-devide($colums: 12, $o: ()) {

  // Mixin default vars
  $o: map-merge((
    name: false,
    devide: 2
  ),$o);

  // Variable Routing
  $name   : map-get($o,name);
  $devide : map-get($o,devide);

  // Check if the Devider is useable
  $check: $colums / $devide;

  @if round($check) == $check {

    // Reduce the Loop
    $count: $colums / $devide;

    @for $i from 1 through $count {

      // Build a Unique Extend ID
      $extend: unique-id();

      // Build the Placeholder
      @at-root {
        %#{$extend} {
          @include grid-size($i, (
            max: $count,
          ));
        }
      }

      @for $o from 1 through $devide {
        // Use outer Classes or free defined selectors
        @if $name != false {
          #{$name}#{$bem-modifier}#{$i + ($count * ($o - 1))} {
              @extend %#{$extend};
          }

        } @else {
          &#{$bem-modifier}#{$i + ($count * ($o - 1))} {
            @extend %#{$extend};
          }
        }
      }
    }
  } @else {
    @warn 'Please check your Devider Number.';
  }
}

// Generate the Offset Width for a Colum
//
// @param  {Number} $colum    - The desired Offset-Columsize
// @param  {map}    $o  - Setup Vars
//         :size [number]     - The required colum size
//         :max [number]      - Max Colums
//         :direction [value] - The Direction off the Offset (default: left)
@mixin offset($colum: 1, $o: ()) {

  // Mixin default Vars
  $o: map-merge((
    max: 12,
    direction: left
  ),$o);

  // Variable Routing
  $max       : map-get($o,max);
  $direction : map-get($o,direction);

  // Cleanup Max
  $m: strip-units($max);

  // Cleanup Colums
  $c: clamp(strip-units($colum), 0, $m);

  @if $direction == left {
    margin-left: span($c,$m);

  } @else {
    margin-right: span($c,$m);
  }
}

  // Old Decrepated Mixin Name (dropped with Kittn 2.5)
  @mixin grid-offset($colum: 1, $o: ()) {
    @include offset($colum: $colum, $o: $o);
  }

// Generate a set off Offsets (left and right)
//
// @param  {number} $colums    - Number of generated offset columns
// @param  {map}  $o     - Setup Vars
//         :name [bool|string] - You can include a classname (non nested mixin), default name is '.offset', Otherwise set it to 'false', the parent Classname will be used as base name
//         :silent [bool]      - Generate Placeholder Classes
@mixin offset-generator($colums: 12, $o: ()) {

  // Mixin default Vars
  $o: map-merge((
    name: false,
    silent: false
  ),$o);

  // Variable Routing
  $name   : map-get($o,name);
  $silent : map-get($o,silent);
  $p      : null;

  // Class Prefix (realClass or silentClass)
  @if $silent {
    $p: '%';

    // If no name available include a empty name for the silent class
    @if $name == false {
      $name: 'offset';
    }

  } @else {
    $p: '.';
  }

  // Cleanup Max
  $m: strip-units($colums);

  // Generate offset Classes
  @for $i from 1 through ($m - 1) {
    // When 'name' is false use the Parent Class
    @if $name == false {

      &-left#{$bem-modifier}#{$i} {
        @include offset($i, (
          max: $m
        ));
      }

      &-right#{$bem-modifier}#{$i} {
        @include offset($i, (
          max: $m,
          direction: right
        ));
      }

    } @else {
      // Generate a List with Selector Names for Control
      @if $silent {
        /* #{$p}#{$name}-left#{$bem-modifier}#{$i}, */
        /* #{$p}#{$name}-right#{$bem-modifier}#{$i} */
      }

      #{$p}#{$name}-left#{$bem-modifier}#{$i} {
        @include offset($i, (
          max: $m
        ));
      }

      #{$p}#{$name}-right#{$bem-modifier}#{$i} {
        @include offset($i, (
          max: $m,
          direction: right
        ));
      }
    }
  }
}

  // Old Decrepated Mixin Name (dropped with Kittn 2.5)
  @mixin grid-offset-generator($colums: 12, $o: ()) {
    @include offset-generator($colums: $colums, $o: $o);
  }

// Move a Colum with Position:Relative to left or right -
// Elements can move out off the container or it change the order
//
// @param  {Number} $colum    - The desired Push & Pullsize
// @param  {map}  $o    - Setup Vars
//         :max [number]      - Max Colums
//         :direction [value] - The Direction off the Offset (default: push), values: push | pull
//         :extend [bool]     - With 'true' the class will connected with a other class.
@mixin pushpull($colum: 1, $o: ()) {

  // Mixin default vars
  $o: map-merge((
    max: 12,
    direction: push,
    extend: false
  ),$o);

  // Variable Routing
  $max       : map-get($o,max);
  $direction : map-get($o,direction);
  $extend    : map-get($o,extend);

  // Cleanup Max
  $m: strip-units($max);

  // Cleanup Colums
  $c: clamp(strip-units($colum), 0, $m);

  @if $extend == false {
    position: relative;

  } @else {
    @extend #{$extend};
  }

  @if $direction == pull {
    right: span($c, $m);

  } @else {
    left: span($c, $m);
  }
}

  // Old Decrepated Mixin Name (dropped with Kittn 2.5)
  @mixin grid-pushpull($colum: 1, $o: ()) {
    @include pushpull($colum: $colum, $o: $o);
  }

// Generate the Push&Pull Classes
//
// @param  {number} $colums    - Number of generated offset columns
// @param  {map}    $o   - Setup Vars
//         :max [number]       - The Maximum Colums (default: 12)
//         :name [bool|string] - You can include a classname (non nested mixin), default name is '.move', Otherwise set it to 'false', the parent Classname will be used as base name
//         :extend [bool]      - With 'true' the class will connected with a other class.
//         :silent [bool]      - Generate Placeholder Classes
@mixin pushpull-generator($colums: 12, $o: ()) {

  // Mixin default Vars
  $o: map-merge((
    name: false,
    extend: false,
    silent: false
  ),$o);

  // Variable Routing
  $name   : map-get($o,name);
  $extend : map-get($o,extend);
  $silent : map-get($o,silent);
  $p      : null;

  // Class Prefix (realClass or silentClass)
  @if $silent {
    $p: '%';

    // If no name available include a empty name for the silent class
    @if $name == false {
      $name: 'pp';
    }

  } @else {
    $p: '.';
  }

  // Cleanup Max
  $m: strip-units($colums);

  // Generate the Push&Pull Classes
  @for $i from 1 through ($m - 1) {
    // When 'name' is false use the Parent Class
    @if $name == false {
      &-push#{$bem-modifier}#{$i} {
        @include pushpull($i, (
          max: $m,
          extend: $extend
        ));
      }

      &-pull#{$bem-modifier}#{$i} {
        @include pushpull($i, (
          max: $m,
          direction: pull,
          extend: $extend
        ));
      }

    } @else {
      // Generate a List with Selector Names for Control
      @if $silent {
        /* #{$p}#{$name}-push#{$bem-modifier}#{$i}, */
        /* #{$p}#{$name}-pull#{$bem-modifier}#{$i} */

        // When a name is not defined the Mixin use a own name for Silent Classes
        $name: if($name, $name, '');
      }

      #{$p}#{$name}-push#{$bem-modifier}#{$i} {
        @include pushpull($i, (
          max: $m,
          extend: $extend
        ));
      }

      #{$p}#{$name}-pull#{$bem-modifier}#{$i} {
        @include pushpull($i,(
          max: $m,
          direction: pull,
          extend: $extend
        ));
      }
    }
  }
}

  // Old Decrepated Mixin Name (dropped with Kittn 2.5)
  @mixin grid-pushpull-generator($colums: 12, $o: ()) {
    @include pushpull-generator($colums: $colums, $o: $o);
  }

// Normalize all Grid Classes. Works only when you not silent the Grid Classes
//
// @param  {map}  $o         - Setup Vars
//         :name [string]    - Desired Name off the Selector that need to remodified
//         :option [value]   - The style Type, values: blockgrid (default), inlinetable, offset, pushpull
//         :important [bool] - Add an Important to the Attribute
@mixin grid-reset($o: ()) {

  // Mixin default vars
  $o: map-merge((
    name: false,
    option: blockgrid,
    important: false
  ),$o);

  // Variable Routing
  $name      : map-get($o,name);
  $option    : map-get($o,option);
  $important : map-get($o,important);

  // Set internal default var
  $i: null;

  // Important Check
  @if $important == true {
    $i: !important
  } @else {
    $i: null
  }

  @if $name != false {

    @if $option == pushpull {
      [class^="#{$name}-push#{$bem-modifier}"],
      [class*=" #{$name}-push#{$bem-modifier}"] {
        left: 0 $i;
      }

      [class^="#{$name}-pull#{$bem-modifier}"],
      [class*=" #{$name}-pull#{$bem-modifier}"] {
        right: 0 $i;
      }

    } @else if $option == offset {
      [class^="#{$name}-right#{$bem-modifier}"],
      [class*=" #{$name}-right#{$bem-modifier}"] {
        margin-right: 0 $i;
      }

      [class^="#{$name}-left#{$bem-modifier}"],
      [class*=" #{$name}-left#{$bem-modifier}"] {
        margin-left: 0 $i;
      }

    } @else if $option == inlinetable {
      [class^="#{$name}"],
      [class*="#{$name}"] {
        display: block $i;
        width: 100% $i;
      }

    } @else {
      // Reset the Base Grid
      [class^="#{$name}"],
      [class*="#{$name}"] {
        float: none $i;
        width: 100% $i;
      }
    }

  } @else {
    @warn 'Please set the Name for the normalization'
  }
}

  // Old Decrepated Mixin Name (dropped with Kittn 2.5)
  @mixin grid-normalizer($o: ()) {
    @include grid-reset($o: $o);
  }
